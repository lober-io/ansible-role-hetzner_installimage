---
- name: Run Hetzner Robot Mock API Container
  raw: docker run -d --rm --network molecule --name hetzner-robot nl2go/hetzner-robot-api-mock:1.4.0
  delegate_to: localhost
  run_once: true
  # Using networks option in molcule.yml destroys the network on localhost during destroy step
  # which is executed even before the test, so we connect networks here
- name: Connect testinfra instances to molecule container network
  raw: docker network connect molecule {{ inventory_hostname }}
  delegate_to: localhost
- name: Update apt repositories using raw module as python might not be installed yet
  raw: if [ $(command -v apt-get) ]; then apt-get update; fi
- name: Install SSH server on apt based hosts as SSH is checked after reboot was requested
  raw: if [ $(command -v apt-get) ]; then apt-get install openssh-server -y; fi
- name: Update yum repositories using raw module as python might not be installed yet
  raw: if [ $(command -v yum) ]; then yum makecache; fi
- name: Install SSH server on yum based hosts as SSH is checked after reboot was requested
  raw: if [ $(command -v yum) ]; then yum -y install initscripts openssh-server && yum clean all; fi
- name: Remove default systemctl on yum based systems
  raw: if [ $(command -v yum) ]; then rm -rf /bin/systemctl; rm -rf /usr/bin/systemctl; fi
- name: Prepare/overwrite docker systemctl replacement script for apt based systems
  get_url:
    url: https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/systemctl.py
    dest: /usr/bin/systemctl
    mode: '0775'
- name: Generate host keys on yum based hosts for SSH to work
  raw: if [ $(command -v yum) ]; then /usr/bin/ssh-keygen -A; fi
- name: Start SSH server on apt based hosts as SSH is checked after reboot was requested
  raw: if [ $(command -v apt-get) ]; then service ssh start; fi
- name: Start SSH server on yum based hosts as SSH is checked after reboot was requested
  raw: if [ $(command -v yum) ]; then service sshd start; fi
- name: Get users homedir
  raw: command echo ~
  register: homedir
  delegate_to: localhost
- name: Create ssh dir in user home directory
  raw: "mkdir -p {{ homedir.stdout | trim }}/.ssh"
  delegate_to: localhost
- name: Create known_hosts file in ssh dir
  raw: "touch {{ homedir.stdout | trim }}/.ssh/known_hosts"
  delegate_to: localhost
- name: Adjust rights for ssh dir in home directory
  raw: "chmod -R 0700 {{ homedir.stdout | trim }}/.ssh"
  delegate_to: localhost
- name: Create ssh directory on host
  raw: "mkdir /root/.ssh"
- name: Create authorized_keys file with fake line in ssh directory on host
  raw: "echo 'test' > /root/.ssh/authorized_keys"
- name: Create base installimage directory
  raw: "mkdir -p /root/.oldroot/nfs/install"
- name: Write fake installimage executable to host
  copy:
    dest: "/root/.oldroot/nfs/install/installimage"
    content: "#!/bin/bash\n\nexit 0"
    mode: '0755'
- name: Create base image directory for regular images
  raw: "mkdir -p /root/.oldroot/nfs/images"
- name: Create default image file
  raw: "touch /root/.oldroot/nfs/images/Ubuntu-1604-xenial-64-minimal.tar.gz"
- name: Add rescue entry for testinfra server to json server db
  uri:
    url: "{{ hetzner_installimage_robot_api_base_url }}/boot/rescue"
    user: "robot"
    password: "secret"
    force_basic_auth: yes
    method: POST
    body:
      active: false
      arch:
        - 64
        - 32
      authorized_key: []
      host_key: []
      os:
        - linux
        - freebsd
        - vkvm
      password: ""
      server_ip: "{{ ansible_default_ipv4.address }}"
      server_number: "{{ ansible_default_ipv4.address.split('.')[3].strip() }}"
    status_code: 201
    body_format: json
  delegate_to: localhost
- name: Add reset entry for testinfra server to json server db
  uri:
    url: "{{ hetzner_installimage_robot_api_base_url }}/reset"
    user: "robot"
    password: "secret"
    force_basic_auth: yes
    method: POST
    body:
      operating_status: "not supported"
      server_ip: "{{ ansible_default_ipv4.address }}"
      server_number: "{{ ansible_default_ipv4.address.split('.')[3].strip() }}"
      type:
        - sw
        - hw
        - man
    status_code: 201
    body_format: json
  delegate_to: localhost
- name: Add server entry for testinfra server to json server db
  uri:
    url: "{{ hetzner_installimage_robot_api_base_url }}/server"
    user: "robot"
    password: "secret"
    force_basic_auth: yes
    method: POST
    body:
      server_ip: "{{ ansible_default_ipv4.address }}"
      server_number: "{{ ansible_default_ipv4.address.split('.')[3].strip() }}"
      server_name: "server{{ 100 | random }}"
      product: "DS 3000"
      dc: "NBG1-DC1"
      traffic: "5 TB"
      flatrate: true
      status: "ready"
      throttled: true
      cancelled: false
      paid_until: "2010-09-02"
      ip:
        - "{{ ansible_default_ipv4.address }}"
      subnet:
        - ip: "2a01:4f8:111:4221::"
          mask: "64"
    status_code: 201
    body_format: json
  delegate_to: localhost